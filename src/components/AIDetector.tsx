import { useState } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Brain, CheckCircle, AlertTriangle, XCircle } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { supabase } from "@/integrations/supabase/client";

interface AIAnalysis {
  probability: number;
  classification: 'human' | 'ai-generated' | 'ai-assisted' | 'uncertain';
  confidence: 'high' | 'medium' | 'low';
  indicators: string[];
  explanation: string;
}

interface AIDetectorProps {
  text?: string;
  context?: 'general' | 'review';
  onAnalysisComplete?: (analysis: AIAnalysis) => void;
}

export const AIDetector = ({ text: initialText = '', context = 'general', onAnalysisComplete }: AIDetectorProps) => {
  const [text, setText] = useState(initialText);
  const [analysis, setAnalysis] = useState<AIAnalysis | null>(null);
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const { toast } = useToast();

  const analyzeText = async () => {
    if (!text.trim()) {
      toast({
        title: "Error",
        description: "Please enter some text to analyze",
        variant: "destructive",
      });
      return;
    }

    setIsAnalyzing(true);
    setAnalysis(null);

    try {
      const { data, error } = await supabase.functions.invoke('ai-detector', {
        body: { text: text.trim(), context }
      });

      if (error) {
        throw error;
      }

      if (data.success) {
        setAnalysis(data.analysis);
        onAnalysisComplete?.(data.analysis);
        
        toast({
          title: "Analysis Complete",
          description: `Text classified as ${data.analysis.classification}`,
        });
      } else {
        throw new Error(data.error || 'Analysis failed');
      }
    } catch (error) {
      console.error('AI detection error:', error);
      toast({
        title: "Analysis Failed",
        description: "Unable to analyze the text. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsAnalyzing(false);
    }
  };

  const getClassificationIcon = (classification: string) => {
    switch (classification) {
      case 'human':
        return <CheckCircle className="w-4 h-4 text-green-600" />;
      case 'ai-generated':
        return <XCircle className="w-4 h-4 text-red-600" />;
      case 'ai-assisted':
        return <AlertTriangle className="w-4 h-4 text-yellow-600" />;
      default:
        return <Brain className="w-4 h-4 text-gray-600" />;
    }
  };

  const getClassificationColor = (classification: string) => {
    switch (classification) {
      case 'human':
        return 'bg-green-100 text-green-800 border-green-200';
      case 'ai-generated':
        return 'bg-red-100 text-red-800 border-red-200';
      case 'ai-assisted':
        return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      default:
        return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getProbabilityColor = (probability: number) => {
    if (probability < 30) return 'text-green-600';
    if (probability < 70) return 'text-yellow-600';
    return 'text-red-600';
  };

  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Brain className="w-5 h-5" />
          AI Content Detector
        </CardTitle>
        <CardDescription>
          {context === 'review' 
            ? 'Analyze if this Amazon review was generated by AI'
            : 'Detect if text content was generated by artificial intelligence'
          }
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        <div>
          <Textarea
            placeholder={context === 'review' 
              ? "Paste the Amazon review text here..."
              : "Paste the text you want to analyze here..."
            }
            value={text}
            onChange={(e) => setText(e.target.value)}
            className="min-h-[120px]"
            disabled={isAnalyzing}
          />
          <div className="flex justify-between items-center mt-2">
            <span className="text-sm text-muted-foreground">
              {text.length} characters
            </span>
            <Button 
              onClick={analyzeText}
              disabled={isAnalyzing || !text.trim()}
              className="min-w-[120px]"
            >
              {isAnalyzing ? "Analyzing..." : "Analyze Text"}
            </Button>
          </div>
        </div>

        {analysis && (
          <div className="space-y-4">
            <Alert>
              <div className="flex items-center gap-2">
                {getClassificationIcon(analysis.classification)}
                <div className="flex-1">
                  <div className="flex items-center gap-2 mb-2">
                    <Badge className={getClassificationColor(analysis.classification)}>
                      {analysis.classification.replace('-', ' ').toUpperCase()}
                    </Badge>
                    <Badge variant="outline">
                      {analysis.confidence} confidence
                    </Badge>
                  </div>
                  <AlertDescription className="text-sm">
                    {analysis.explanation}
                  </AlertDescription>
                </div>
              </div>
            </Alert>

            <div className="space-y-2">
              <div className="flex justify-between items-center">
                <span className="text-sm font-medium">AI Probability</span>
                <span className={`text-sm font-bold ${getProbabilityColor(analysis.probability)}`}>
                  {analysis.probability}%
                </span>
              </div>
              <Progress 
                value={analysis.probability} 
                className="h-2"
              />
              <p className="text-xs text-muted-foreground">
                Higher percentages indicate more likely AI-generated content
              </p>
            </div>

            {analysis.indicators.length > 0 && (
              <div>
                <h4 className="text-sm font-medium mb-2">Detection Indicators</h4>
                <div className="flex flex-wrap gap-1">
                  {analysis.indicators.map((indicator, index) => (
                    <Badge key={index} variant="secondary" className="text-xs">
                      {indicator}
                    </Badge>
                  ))}
                </div>
              </div>
            )}
          </div>
        )}
      </CardContent>
    </Card>
  );
};